<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Stefano]]></title>
    <link href="/blog/tags/git.xml" rel="self"/>
    <link href="/"/>
    <updated>2015-03-08T21:28:08+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[A little handy tool: PSR Police]]></title>
            <link href="/blog/2015/03/03/a-little-handy-tool-psr-police"/>
            <updated>2015-03-03T00:00:00+01:00</updated>
            <id>/blog/2015/03/03/a-little-handy-tool-psr-police</id>
            <content type="html"><![CDATA[<p>The PSR specifications have taken the PHP community by storm, and gave different
developers working on different projects a common ground to share code and 
improve the speed and quality of their respective works.</p>

<p>The <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">PSR-1</a> and <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">PSR-2</a>  specifications, in particular, are extremely important as
they suggest a common formatting standard for PHP files. While this may seem
unimportant, in the days of GitHub and distributed version control, keeping
a consistent coding standard can help make pull requests little, and lessens
the risk of having to perform a manual merge.</p>

<p>Furthermore, thanks to SensioLabs, we now have a [nifty tool]
(https://github.com/FriendsOfPHP/PHP-CS-Fixer) to automatically
correct our code style to make it compliant with PSR-1 and PSR-2. But after
using it for a while, I noticed I kept forgetting to run it before commit.
The common suggestion to avoid this is to set up a precommit-hook in your
working tree, but the process is a bit involved and difficult to remember.</p>

<p>For this reason I came up with a simple tool to automate the steps: 
<a href="https://github.com/tacone/psr-police">PSR Police</a>.</p>

<h2>Installation</h2>

<p>To use PSR Police you have to first install <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a>
system-wide.</p>

<pre><code class="bash">wget http://get.sensiolabs.org/php-cs-fixer.phar -O php-cs-fixer
sudo chmod a+x php-cs-fixer
sudo mv php-cs-fixer /usr/local/bin/php-cs-fixer
</code></pre>

<p>Then you can install PSR Police:</p>

<pre><code class="bash">phpcomposer global require tacone/psr-police
</code></pre>

<p>After that, make sure that <code>~/.composer/vendor/bin</code> is in your PATH.</p>

<p>All done!</p>

<h2>Usage</h2>

<p>From now on you can enforce the PSR-1/2 coding standard on any
project with one command:</p>

<pre><code class="bash">cd /var/www/myproject
psr-police
</code></pre>

<p>You just need to run the command once per project. PSR Police will kick
in at every commit, and format any committed file.</p>

<p>A few notes:</p>

<ul>
<li>blade files are ignored</li>
<li>only the new and modified files since the previous commit will 
be re-formatted</li>
<li>if you clone your repository in another location, you'll need to run
PSR Police again, as GIT hooks are not persisted in the remote repository</li>
<li>if you have a GIT pre-commit already set-up, PSR Police won't do
anything, and just spit a warning</li>
</ul>

<p>You can remove the PSR Police hook from your repository by just running:</p>

<pre><code class="bash">rm .git/hooks/
</code></pre>

<p>I you will find this little simple tool as useful as I do.</p>
]]></content>
        </entry>
    </feed>