<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Stefano]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2015-03-04T23:14:11+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[How to hide a class method in PHP]]></title>
            <link href="/blog/2015/03/04/how-to-hide-a-class-method-in-php"/>
            <updated>2015-03-04T00:00:00+01:00</updated>
            <id>/blog/2015/03/04/how-to-hide-a-class-method-in-php</id>
            <content type="html"><![CDATA[<p>Normally, when you extend a class and ovveride one method, you can change its visibility,
but only to widen it. You can make a <em>private</em> method <em>protected</em> or <em>public</em>, and a 
<em>protected</em> method <em>public</em>. This is because restricting the visibility of a method would
break the <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov substitution principle</a>
as it would not allow to use the subclass in place of its superclass.</p>

<p>This is also true for PHP at least when you use classical inheritance, and will fail badly if you even
try to override a public method with a private or protected one:</p>

<pre><code class="php">class Utility { 
    public function methodTwo()
    {

    }
}
class Driver extends Utility 
{ 
    protected function methodTwo()
    {

    }
}
</code></pre>

<p>The code above will throw a fatal error:</p>

<pre><code>PHP Fatal error:  Access level to Utility::methodTwo() must be public (as in class Utility) in php shell code on line 1
</code></pre>

<p>So, if you're trying to reduce the visibility of a method of an existing class, you're out of luck. You'll
have to either override the method to make it throw a <code>BadMethodException</code>, change the code of the
superclass or, perhaps, just live with it.</p>

<p>It turns out though, that PHP <strong>supports</strong> reducing the visibility of a method defined inside a <em>trait</em>.
So, if you know that you'll need to hide methods of a superclass, you might consider to implement
such superclass as a trait:</p>

<pre><code class="php">trait Utility {
    public function methodOne() 
    {

    }
    public function methodTwo() 
    {

    }
}

class Driver {

    use Utility;

    protected function methodTwo()
    {

    }
}
</code></pre>

<p>And here we go:</p>

<pre><code class="php">php &gt; $driver = new Driver;
php &gt; $driver-&gt;methodTwo();

PHP Fatal error:  Call to protected method Driver::methodTwo() from context '' in php shell code on line 1
</code></pre>

<p>As you see, the method has been hidden and it's unreachable from the outer context.</p>

<h2>Nota bene</h2>

<p>As usual with protected and private methods, you cannot use <code>method_exists</code> to check if a 
method is callable or not, as it will return true no matter what the visibility is. You have to use <code>is_callable</code>:</p>

<pre><code class="php">php &gt; var_dump(is_callable([$driver, 'methodOne']));
bool(true)
php &gt; var_dump(is_callable([$driver, 'methodTwo']));
bool(false)
</code></pre>

<p>That's it, have fun!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[A little handy tool: PSR Police]]></title>
            <link href="/blog/2015/03/03/a-little-handy-tool-psr-police"/>
            <updated>2015-03-03T00:00:00+01:00</updated>
            <id>/blog/2015/03/03/a-little-handy-tool-psr-police</id>
            <content type="html"><![CDATA[<p>The PSR specifications have taken the PHP community by storm, and gave different
developers working on different projects a common ground to share code and 
improve the speed and quality of their respective works.</p>

<p>The <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md">PSR-1</a> and <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md">PSR-2</a>  specifications, in particular, are extremely important as
they suggest a common formatting standard for PHP files. While this may seem
unimportant, in the days of GitHub and distributed version control, keeping
a consistent coding standard can help make pull requests little, and lessens
the risk of having to perform a manual merge.</p>

<p>Furthermore, thanks to SensioLabs, we now have a [nifty tool]
(https://github.com/FriendsOfPHP/PHP-CS-Fixer) to automatically
correct our code style to make it compliant with PSR-1 and PSR-2. But after
using it for a while, I noticed I kept forgetting to run it before commit.
The common suggestion to avoid this is to set up a precommit-hook in your
working tree, but the process is a bit involved and difficult to remember.</p>

<p>For this reason I came up with a simple tool to automate the steps: 
<a href="https://github.com/tacone/psr-police">PSR Police</a>.</p>

<h2>Installation</h2>

<p>To use PSR Police you have to first install <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a>
system-wide.</p>

<pre><code class="bash">wget http://get.sensiolabs.org/php-cs-fixer.phar -O php-cs-fixer
sudo chmod a+x php-cs-fixer
sudo mv php-cs-fixer /usr/local/bin/php-cs-fixer
</code></pre>

<p>Then you can install PSR Police:</p>

<pre><code class="bash">phpcomposer global require tacone/psr-police
</code></pre>

<p>After that, make sure that <code>~/.composer/vendor/bin</code> is in your PATH.</p>

<p>All done!</p>

<h2>Usage</h2>

<p>From now on you can enforce the PSR-1/2 coding standard on any
project with one command:</p>

<pre><code class="bash">cd /var/www/myproject
psr-police
</code></pre>

<p>You just need to run the command once per project. PSR Police will kick
in at every commit, and format any committed file.</p>

<p>A few notes:</p>

<ul>
<li>blade files are ignored</li>
<li>only the new and modified files since the previous commit will 
be re-formatted</li>
<li>if you clone your repository in another location, you'll need to run
PSR Police again, as GIT hooks are not persisted in the remote repository</li>
<li>if you have a GIT pre-commit already set-up, PSR Police won't do
anything, and just spit a warning</li>
</ul>

<p>You can remove the PSR Police hook from your repository by just running:</p>

<pre><code class="bash">rm .git/hooks/
</code></pre>

<p>I you will find this little simple tool as useful as I do.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to handle exceptions from __toString]]></title>
            <link href="/blog/2015/03/02/how-to-handle-exceptions-from-__toString"/>
            <updated>2015-03-02T00:00:00+01:00</updated>
            <id>/blog/2015/03/02/how-to-handle-exceptions-from-__toString</id>
            <content type="html"><![CDATA[<p>This is a modified excerpt of an <a href="http://stackoverflow.com/a/27307132/358813">answer of mine on StackOverflow</a>.</p>

<p>I came up with a (perhaps) better way to handle exceptions inside <code>__toString()</code>:</p>

<pre><code>public function __toString()
{
    try {
        // ... do some stuff
        // and try to return a string
        $string = $this-&gt;doSomeStuff();
        if (!is_string($string)) {
            // we must throw an exception manually here because if $value
            // is not a string, PHP will trigger an error right after the
            // return statement, thus escaping our try/catch.
            throw new \LogicException(__CLASS__ . "__toString() must return a string");
        }

        return $string;
    } catch (\Exception $exception) {
        $previousHandler = set_exception_handler(function (){
        });
        restore_error_handler();
        call_user_func($previousHandler, $exception);
        die;
    }
}
</code></pre>

<p>This assumes there is an exception handler defined, which is the case for most frameworks. As with the <code>trigger_error</code> method, <strong>doing this will defy the purpose of try..catch</strong>, but still it is much better than dumping output with <code>echo</code>. Also, many framework transform errors into exceptions, so <code>trigger_error</code> won't work anyway.</p>

<p>As an added bonus, you'll get a full stack-trace as with normal exceptions and the normal dev-production behaviour of your framework of choice.</p>

<p>Works very well in Laravel, and I'm pretty sure it'll work in pretty much all the modern PHP frameworks out there.</p>

<p>Screenshot relevant:<br />
<em>note</em>: in this example, <code>output()</code> is called by a <code>__toString()</code> method.</p>

<p><img src="http://i.stack.imgur.com/iaBy6.png" alt="__toString() exception caught by Laravel exception handler" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to output a grid with Twig and Boostrap]]></title>
            <link href="/blog/2014/08/11/easy-grid-with-twig"/>
            <updated>2014-08-11T00:00:00+02:00</updated>
            <id>/blog/2014/08/11/easy-grid-with-twig</id>
            <content type="html"><![CDATA[<p>With Twig, the easiest way to format a result-set into a grid is through
the <a href="http://twig.sensiolabs.org/doc/filters/batch.html">batch filter</a>:</p>

<pre><code class="twig">
{% set items = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] %}

{% for row in items|batch(3) %}
&lt;div class="row"&gt;
    {% for cell in row %}
        &lt;div class="col-xs-4"&gt;{{ cell }}&lt;/div&gt;
    {% endfor %}
&lt;/div&gt;
{% endfor %}

</code></pre>

<p>The example above will output a 3 column grid. Just make sure to adjust your
css classes to set the cells' width accordingly.</p>

<p>If you want to output a table instead, you can follow this example from the
official documentation:</p>

<pre><code class="twig">
{% set items = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] %}

&lt;table&gt;
{% for row in items|batch(3, 'No item') %}
    &lt;tr&gt;
        {% for column in row %}
            &lt;td&gt;{{ column }}&lt;/td&gt;
        {% endfor %}
    &lt;/tr&gt;
{% endfor %}
&lt;/table&gt;

</code></pre>

<p>Here's also a full example of a Bootstrap <a href="http://getbootstrap.com/components/#media">media</a>
grid, plus Laravel pagination:</p>

<pre><code class="twig">
{% for row in items|batch(2) %}
&lt;div class="row"&gt;
    {% for i in row %}
    &lt;div class="media col-xs-6"&gt;
        {% if i.photo|trim %}
        &lt;a class="pull-left" href="/post/{{ i.id }}"&gt;
            &lt;img class="media-object" src="/uploads/{{ i.filename }}" alt="{{ i.title }}"&gt;
        &lt;/a&gt;
        {% endif %}
        &lt;div class="media-body"&gt;
            &lt;a href="/post/{{ i.id }}"&gt;
                &lt;h4 class="media-heading"&gt;{{ i.title }}&lt;/h4&gt;
            &lt;/a&gt;
            &lt;div class="date"&gt;{{ i.publication_date|date('M d, Y') }}&lt;/div&gt;
            &lt;p&gt;{{ Str_words(i.body|striptags, 20) }}&lt;/p&gt;
            &lt;a href="/post/{{ i.id }}" class="read-more"&gt;Read more &amp;rarr;&lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    {% endfor %}
&lt;/div&gt;
{% endfor %}

{{ items.appends(Input_except('page')).links()|raw }}

</code></pre>

<p>Enjoy!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to use any PHP function in Twig]]></title>
            <link href="/blog/2014/08/09/use_php_functions_in_twig"/>
            <updated>2014-08-09T00:00:00+02:00</updated>
            <id>/blog/2014/08/09/use_php_functions_in_twig</id>
            <content type="html"><![CDATA[<p>A common reason I hear for using Blade instead of Twig with Laravel
is the need to register with Twig each PHP function you need before
you can use it in your templates.</p>

<p>This is by design, but there's a way around, if you need it:</p>

<pre><code class="php">$twig-&gt;addFunction(new Twig_SimpleFunction('php_*', function() {
    $arguments = func_get_args();
    $function = array_shift($arguments);
    return call_user_func_array($function, $arguments);
    }
));
</code></pre>

<p>Now you can use whatever function you want in your templates, for example
the much needed <a href="http://php.net/manual/en/function.str-rot13.php">str_rot13</a>:</p>

<pre><code class="twig">
rot13 with makes me {{ php_str_rot13("happy")}} !

</code></pre>

<p>Just in case you use Laravel and the excellent
<a href="https://github.com/rcrowe/TwigBridge">TwigBridge by Rcrowe</a> I suggest you to
register this catch all function inside <code>start/global.php</code> in this way:</p>

<pre><code class="php">Event::listen('twigbridge.twig', function(Twig_Environment $twig) {
    $twig-&gt;addFunction(new Twig_SimpleFunction('php_*', function() {
        $arguments = func_get_args();
        $function = array_shift($arguments);
        return call_user_func_array($function, $arguments);
    }
    ));
});
</code></pre>

<p>From now on you'll be able to use any PHP function you like by just prepending
<code>php_</code> to the name of the function.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to throw a 404 error if a record is not found.]]></title>
            <link href="/blog/2014/08/09/laravel_throw_404_when_model_not_found"/>
            <updated>2014-08-09T00:00:00+02:00</updated>
            <id>/blog/2014/08/09/laravel_throw_404_when_model_not_found</id>
            <content type="html"><![CDATA[<p>Here is an extremely short yet readable way to throw a "page not found"
HTTP error when a record is not found in your Laravel app.</p>

<pre><code>public function getPost($id)
{
    $post = Article::find($id) or App::abort(404);
    return View::make('frontend/post', compact('post'));
}
</code></pre>

<p>Laravel is special because it allows us to keep our codebase extremely
concise. Since some trade-offs have been made within the framework to allow
for that, we should maximize the benefit by writing in a smarter way.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Import Many Csv Files In Mongo]]></title>
            <link href="/blog/2014/08/04/import-many-csv-files-in-mongo"/>
            <updated>2014-08-04T00:00:00+02:00</updated>
            <id>/blog/2014/08/04/import-many-csv-files-in-mongo</id>
            <content type="html"><![CDATA[<p>Use this one liner to bulk import all the csv files inside a given directory into the <code>mydatabase</code> db in Mongo.</p>

<pre><code class="bash">for i in *.csv; do mongoimport -d mydatabase -c ${i%.*} --type csv --file $i --headerline ; done
</code></pre>

<p>The files should be plain CSV files with an header row (that is: the first line should contain the fields name). Each file will be put into a different collection named after the filename.</p>

<p>For example, the following CSV file <code>addressbook.csv</code>:</p>

<pre><code class="csv">id,name,email
1,Tommy,tommy@example.com
</code></pre>

<p>Will create an <code>addressbook</code> collection with the following object:</p>

<pre><code class="json">{
    _id   : 'xxxxxxxxxxxxxxxxx',
    id    : 1,
    name  : "Tommy",
    email : "tommy@example.com"
}
</code></pre>

<p>Enjoy!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Stateful select box in one line with Laravel and Twig]]></title>
            <link href="/blog/2014/07/26/select-box-with-laravel-twig"/>
            <updated>2014-07-26T00:00:00+02:00</updated>
            <id>/blog/2014/07/26/select-box-with-laravel-twig</id>
            <content type="html"><![CDATA[<p>Here is a (long) one-liner to output a stateful select box with Laravel and the 
<a href="https://github.com/rcrowe/TwigBridge">Twig Bridge Bundle</a>:</p>

<pre><code class="twig">{{ Form_select('user', {'':'Select user'} | merge(user.lists('id', 'name')),Request_get('user'), {class:'form-control'})|raw }}
</code></pre>

<p>In the code sample, <code>user</code> is an Eloquent model, <code>Request_get</code> binds
automatically to the <code>Request::get()</code> method of Laravel's Request facade as well as
<code>Form_select</code> binds to <code>Form::select()</code>, the last array pushes a <code>form-control</code> class 
to the <code>select</code> tag for enhanced bootstrap styling.</p>

<p>Notice we are merging arrays to ensure the select box presents an empty option to beg
the user to choose one:</p>

<pre><code class="twig">{'':'-- Industry --'} | merge(user.lists('id', 'name'))
</code></pre>

<p>When the user submits the form to another page containing the same code snippet, our selectbox
will appear with the right value already selected.</p>

<p>While this one-liner is long, somewhat redundant and a bit complicated it's good for
quick copy-pastes and works with plain Laravel + Twig bridge. A Blade version would of 
course be very similar.</p>
]]></content>
        </entry>
    </feed>